import asyncio
import json
import random
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Game
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7596427516:AAGuvAu9W9iwsEuROSmQ65JUUf7mD0iM5Es"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
GAME_SHORT_NAME = "flappy_bird"  # –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∏–≥—Ä—ã –≤ BotFather

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserData:
    def __init__(self):
        self.users = {}
        self.leaderboard = []
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('user_data.json'):
                with open('user_data.json', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.users = data.get('users', {})
                    self.leaderboard = data.get('leaderboard', [])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'users': self.users,
                'leaderboard': self.leaderboard
            }
            with open('user_data.json', 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_user_stats(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        if user_id_str not in self.users:
            self.users[user_id_str] = {
                'games_played': 0,
                'best_score': 0,
                'total_score': 0,
                'last_played': None
            }
        return self.users[user_id_str]
    
    def update_score(self, user_id: int, score: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        user_stats = self.get_user_stats(user_id)
        
        user_stats['games_played'] += 1
        user_stats['total_score'] += score
        user_stats['last_played'] = datetime.now().isoformat()
        
        if score > user_stats['best_score']:
            user_stats['best_score'] = score
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
        self.update_leaderboard(user_id, score)
        self.save_data()
    
    def update_leaderboard(self, user_id: int, score: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.leaderboard = [entry for entry in self.leaderboard if entry['user_id'] != user_id]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        self.leaderboard.append({
            'user_id': user_id,
            'score': score,
            'date': datetime.now().isoformat()
        })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç–∞
        self.leaderboard.sort(key=lambda x: x['score'], reverse=True)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10
        self.leaderboard = self.leaderboard[:10]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = UserData()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å –≤ Flappy Bird", callback_data="play_game"))
    builder.add(InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"))
    builder.add(InlineKeyboardButton(text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard"))
    builder.add(InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"))
    builder.adjust(2)
    return builder.as_markup()

def get_game_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É", callback_data="launch_game"))
    builder.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flappy Bird Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É Flappy Bird –ø—Ä—è–º–æ –≤ Telegram.

üéØ –¶–µ–ª—å –∏–≥—Ä—ã: –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ç–∏—Ü–µ–π –∏ –ø—Ä–æ–ª–µ—Ç–∞–π—Ç–µ —á–µ—Ä–µ–∑ —Ç—Ä—É–±—ã, –Ω–µ –∑–∞–¥–µ–≤–∞—è –∏—Ö.

üéÆ –ù–∞–∂–º–∏—Ç–µ "–ò–≥—Ä–∞—Ç—å –≤ Flappy Bird" —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∏–≥—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

üéÆ **–ò–≥—Ä–∞ Flappy Bird:**
- –ù–∞–∂–º–∏—Ç–µ "–ò–≥—Ä–∞—Ç—å –≤ Flappy Bird" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
- –ò–≥—Ä–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ Telegram
- –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ç–∏—Ü–µ–π –∫–∞—Å–∞–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–ª–∞–≤–∏—à
- –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å —Ç—Ä—É–±–∞–º–∏ –∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —ç–∫—Ä–∞–Ω–∞
- –ö–∞–∂–¥–∞—è –ø—Ä–æ–π–¥–µ–Ω–Ω–∞—è —Ç—Ä—É–±–∞ –¥–∞—ë—Ç 1 –æ—á–∫–æ

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
- –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –û–±—â–∏–π —Å—á—ë—Ç

üèÜ **–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:**
- –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ª—É—á—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
- –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üéØ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
- –í –∏–≥—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Å–∞–Ω–∏—è –∏–ª–∏ –∫–ª–∞–≤–∏—à–∏

–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üê¶
"""
    await message.answer(help_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(lambda c: c.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "play_game")
async def show_game_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ"""
    game_info_text = """
üéÆ Flappy Bird - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞

üéØ **–¶–µ–ª—å:** –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ç–∏—Ü–µ–π –∏ –ø—Ä–æ–ª–µ—Ç–∞–π—Ç–µ —á–µ—Ä–µ–∑ —Ç—Ä—É–±—ã

üéÆ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
- –ö–∞—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à –¥–ª—è –ø—Ä—ã–∂–∫–∞
- –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å —Ç—Ä—É–±–∞–º–∏
- –ö–∞–∂–¥–∞—è —Ç—Ä—É–±–∞ = 1 –æ—á–∫–æ

üöÄ –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
"""
    await callback.message.edit_text(game_info_text, reply_markup=get_game_keyboard())
    await callback.answer()

@router.callback_query(lambda c: c.data == "launch_game")
async def launch_game(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_game(
            chat_id=callback.from_user.id,
            game_short_name=GAME_SHORT_NAME
        )
        await callback.answer("üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –û—Ç–∫—Ä–æ–π—Ç–µ –µ—ë –≤ Telegram.")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: {e}")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: {e}")

@router.callback_query(lambda c: c.data == "my_stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = user_data.get_user_stats(callback.from_user.id)
    
    stats_text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats['games_played']}
üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']}
üìà –û–±—â–∏–π —Å—á—ë—Ç: {stats['total_score']}
"""
    
    if stats['last_played']:
        last_played = datetime.fromisoformat(stats['last_played'])
        stats_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: {last_played.strftime('%d.%m.%Y %H:%M')}"
    
    await callback.message.edit_text(stats_text, reply_markup=get_main_keyboard())
    await callback.answer()

@router.callback_query(lambda c: c.data == "leaderboard")
async def show_leaderboard(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    if not user_data.leaderboard:
        leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.\n\n–°—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!"
    else:
        leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
        for i, entry in enumerate(user_data.leaderboard, 1):
            try:
                user = await bot.get_chat(entry['user_id'])
                username = user.username or user.first_name
            except:
                username = f"–ò–≥—Ä–æ–∫ {entry['user_id']}"
            
            date = datetime.fromisoformat(entry['date']).strftime('%d.%m')
            leaderboard_text += f"{i}. {username} - {entry['score']} –æ—á–∫–æ–≤ ({date})\n"
    
    await callback.message.edit_text(leaderboard_text, reply_markup=get_main_keyboard())
    await callback.answer()

@router.callback_query(lambda c: c.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

üéÆ **–ò–≥—Ä–∞ Flappy Bird:**
- –ù–∞–∂–º–∏—Ç–µ "–ò–≥—Ä–∞—Ç—å –≤ Flappy Bird" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
- –ò–≥—Ä–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ Telegram
- –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ç–∏—Ü–µ–π –∫–∞—Å–∞–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–ª–∞–≤–∏—à
- –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å —Ç—Ä—É–±–∞–º–∏ –∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —ç–∫—Ä–∞–Ω–∞
- –ö–∞–∂–¥–∞—è –ø—Ä–æ–π–¥–µ–Ω–Ω–∞—è —Ç—Ä—É–±–∞ –¥–∞—ë—Ç 1 –æ—á–∫–æ

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
- –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –û–±—â–∏–π —Å—á—ë—Ç

üèÜ **–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:**
- –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ª—É—á—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
- –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üéØ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
- –í –∏–≥—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Å–∞–Ω–∏—è –∏–ª–∏ –∫–ª–∞–≤–∏—à–∏

–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üê¶
"""
    await callback.message.edit_text(help_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
@router.message(lambda message: message.game)
async def handle_game_result(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã"""
    if message.game and message.game.short_name == GAME_SHORT_NAME:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –∏–∑ callback_data
        if hasattr(message, 'game_high_score'):
            score = message.game_high_score
        else:
            score = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.update_score(message.from_user.id, score)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        result_text = f"""
üéÆ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã Flappy Bird!

üèÜ –í–∞—à —Å—á—ë—Ç: {score}
üìä –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data.get_user_stats(message.from_user.id)['games_played']}
ü•á –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_data.get_user_stats(message.from_user.id)['best_score']}

–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?
"""
        await message.answer(result_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∏–≥—Ä—ã
@router.callback_query(lambda c: c.data.startswith("game_"))
async def handle_game_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∏–≥—Ä—ã"""
    if callback.data.startswith("game_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –∏–∑ callback_data
        try:
            score = int(callback.data.split("_")[1])
            user_data.update_score(callback.from_user.id, score)
            
            result_text = f"""
üéÆ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã Flappy Bird!

üèÜ –í–∞—à —Å—á—ë—Ç: {score}
üìä –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data.get_user_stats(callback.from_user.id)['games_played']}
ü•á –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_data.get_user_stats(callback.from_user.id)['best_score']}

–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?
"""
            await callback.message.edit_text(result_text, reply_markup=get_main_keyboard())
        except:
            await callback.answer("üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    await callback.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("üéÆ Flappy Bird Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–≥—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ BotFather —Å –∏–º–µ–Ω–µ–º: flappy_bird_game")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
